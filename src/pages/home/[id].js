import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { useState, useEffect } from 'react'
import axios from 'axios'
import { prisma } from '../../../server/db/client'
import { useRouter } from 'next/router'
import Task from '../../../components/task'
import { NewTask } from '../../../components/input'
import { BackButton } from '../../../components/button'


export default function Home({ desc, id, listId, completed: test, taskId, task: initialTask, listName }) {
    const [task, setTask] = useState(initialTask)
    const [newTask, setNewTask] = useState("")
    const router = useRouter()
    const { name } = router.query
    const [newTaskDesc, setNewTaskDesc] = useState("")
    
    

    const r = useRouter()

    const handleSubmit = async (e) => {
        e.preventDefault();
        const response = await axios.post(`/api/list/${id}/tasks`, {
            desc: newTask,
            completed: false,
        })
        const slayTask = response.data
        setNewTask("")
        setTask([...task , slayTask]);
    }

    const handleToggle = async (taskId) => {
        const updatedTask = task.find(t => t.taskId === taskId);
        updatedTask.completed = true;
        await axios.patch(`/api/list/${id}/tasks/${taskId}`, updatedTask);

        if (updatedTask.completed) {
            setTimeout(async () => {
                await axios.delete(`/api/list/${id}/tasks/${taskId}`);
                setTask(task.filter(t => t.taskId !== taskId));
            }, 500);
        }
        setTask(task.map(t => t.taskId === taskId ? updatedTask : t));
    }

    const handleDelete = async (taskId) => {
        await axios.delete(`/api/list/${id}/tasks/${taskId}`);
        setTask(task.filter(t => t.taskId !== taskId));
    }
    
    const handlePatch = async (taskId, listId, e) => {
        e.preventDefault();
        const updatedTask = task.find((t) => t.taskId === taskId);
        updatedTask.desc = newTaskDesc;
        await axios.patch(`/api/list/${listId}/tasks/${taskId}`, {
          desc: newTaskDesc,
          taskId: taskId,
        });
        setTask(task.map((t) => (t.taskId === taskId ? updatedTask : t)));
        setNewTaskDesc("");
      };

    return (
        <>
            <Head>
                <title>Home page</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.task}>
                <BackButton onBack={()=>r.push('/home')} />
                <div className={styles.taskcont} >
                    <div className={styles.foldername}>
                        <div>
                            <img src='/folder.svg' width={50} height={50}></img>
                            <h1>{name}</h1>
                        </div>
                        <div>
                        <h1>{task.length} tasks</h1>
                        </div>
                    </div>
                    <hr className={styles.hr}></hr>

                    {task.length === 0 ? (
                        <div className={styles.notask}>
                            <h2>Empty like my soul</h2>
                            <img src='/emptystate.svg' width={200} height={200}></img>
                        </div>
                    ) : (
                        <div>
                            {task.map((o, i) => (
                                <Task key={i}
                                    txt={o.desc}
                                    value={newTaskDesc}
                                    completed={o.completed}
                                    onHandleClick={() => handleToggle(o.taskId)}
                                    onHandleDelete={() => handleDelete(o.taskId)}
                                   onHandleChange={(e) => setNewTaskDesc(e.target.value)}
                                   onHandleSubmit={(e) => handlePatch(o.taskId, id, e)}
                                ></Task>
                            ))}
                        </div>
                    )}

                    <NewTask
                        value={newTask}
                        onHandleChange={(e) => setNewTask(e.target.value)}
                        onHandleSubmit={handleSubmit} />
                </div>
            </main>
        </>
    )
}

export async function getServerSideProps(context) {
    const id = context.query.id;
    const task = await prisma.task.findMany({
        where: {
            listId: parseInt(id),
            completed: false,
        },
    });
    return {
        props: {
            id,
            task: JSON.parse(JSON.stringify(task)),
        },
    };
}
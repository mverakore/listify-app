import Head from 'next/head'
import Image from 'next/image'
import styles from '@/styles/Home.module.css'
import { prisma } from "server/db/client"
import { useState, useEffect } from 'react'
import axios from 'axios'
import Link from 'next/link'
import { AddList } from '../../../components/button'
import { NewList } from '../../../components/input'
import { useRouter } from 'next/router'
import { useSession, signIn, signOut } from "next-auth/react"
import { Profile } from '../../../components/profile'
import { NavBar } from '../../../components/nav'
import { getSession } from 'next-auth/react'

export default function Home({ list: intialList }) {

  const { data: session } = useSession()

  const r = useRouter()

  const [listName, setListName] = useState("")
  const [list, setList] = useState(intialList)
  const [isVisible, setIsVisible] = useState(false)
  const [isClicked, setIsClicked] = useState(false)
  const [isEdit, setIsEdit] = useState(false)
  const [newlistName, setNewListName] = useState("")
  const [editStates, setEditStates] = useState(intialList.map(() => false))
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchList = async () => {
      const response = await axios.get(`/api/list?userId=${session.user.id}`)
      setList(response.data)
      setEditStates(response.data.map(() => false))
      setIsLoading(false)
    }
    if (session) {
      fetchList()
    }
  }, [session])
  

  const handleSubmit = async (e) => {
    e.preventDefault();
    const response = await axios.post('/api/list', {
      name: listName,
    })
    const newList = response.data
    setListName("")
    setList([newList, ...list])
  }

  const handleDelete = async (e, id) => {
    e.stopPropagation();
    await axios.delete(`/api/list/${id}`);
    const updatedList = list.filter((item) => item.id !== id);
    setList(updatedList);
  }

  const handleEdit = async (e, id, index) => {
    e.preventDefault();
    e.stopPropagation();
    await axios.patch(`/api/list/${id}`, {
      name: newlistName,
      listId: id,
    })
    const updatedList = list.map((item, i) => {
      if (i === index) {
        return { ...item, name: newlistName };
      }
      return item;
    });
    setList(updatedList);
    setEditStates(editStates.map((state, i) => i === index ? !state : state));
    setNewListName("")
  }


  const bgStyles = [
    { background: 'url(/purplelist.svg) no-repeat center / contain', zIndex: 1 },
    { background: 'url(/limelist.svg) no-repeat center / contain', zIndex: 2 },
    { background: 'url(/pinklist.svg)no-repeat center / contain', zIndex: 3 },
    { background: 'url(/list.svg)no-repeat center / contain', zIndex: 4 }
  ];

  return (
    <>
      <Head>
        <title>Home page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
    
      <main className={styles.main}>
        <div className={styles.topcont}>
          
         { !session ? 
            <></> : <Profile />
          }

          <h1 className={styles.header}>My lists</h1>
          <AddList
            onHandleClick={() => setIsVisible(!isVisible)}
            onHandleDelete={() => setIsClicked(!isClicked)}
            onHandleEdit={() => setIsEdit(!isEdit)}
          />
        </div>
        <hr className={styles.hr2}></hr>
        {isVisible && <NewList
          onHandleSubmit={handleSubmit}
          value={listName}
          onHandleChange={(e) => setListName(e.target.value)}
        ></NewList>}
        {!session ? (
          <div className={styles.notask}>
            <h2>You're not log in right now!</h2>
            <img src='/nouser.svg' width={200} height={200}></img>
          </div>)
          : list.length === 0 ? (
            <div className={styles.notask}>
              <h2>Empty like my soul</h2>
              <img src='/emptystate.svg' width={200} height={200}></img>
            </div>)
            :
            <div>
              {list.map((o, index) => (
                <div key={o.id} className={styles.listbg} style={{ ...bgStyles[index % bgStyles.length], zIndex: index }}
                  onClick={() => r.push({
                    pathname: `/home/${o.id}`,
                    query: { name: o.name }
                  })}
                >
                  <div key={o.id} className={styles.list}>
                    {isEdit && !editStates[index] ? (
                      <form onSubmit={(e) => handleEdit(e, o.id, index)} key={o.id}>
                        <input className={styles.input}
                          type="text"
                          value={newlistName}
                          placeholder={o.name}
                          onChange={(e) => setNewListName(e.target.value)}
                          onClick={(e) => e.stopPropagation()}
                        >
                        </input>
                      </form>
                    ) : (
                      <p className={styles.link}>
                        <img src="/folder.svg" width={65} height={65}></img>
                        {o.name}
                      </p>
                    )}

                    {isClicked ? (
                      <button className={styles.delete} onClick={(e) => handleDelete(e, o.id)}>Delete</button>
                    )
                      :
                      <p>{o.taskCount} tasks</p>}
                  </div>
                </div>
              ))}
            </div>
        }
      </main>
    </>
  )
}

export async function getServerSideProps({req}) {

  const list = await prisma.list.findMany()
  return {
    props: {
      list: JSON.parse(JSON.stringify(list)),
    },
    
  }
}
